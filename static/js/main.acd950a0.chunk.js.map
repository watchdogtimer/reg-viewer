{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["accessors","classroomForSessionA","name","class","room","classroomForSessionB","rawMasterCsv","duplicateCsv","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","columns","loadTable","masterArray","dupes","invalidRows","afterSchoolPrograms","afterSchoolProgramsColumns","dataMapSessionA","dataMapSessionB","reloadTable","bind","assertThisInitialized","showMaster","loadMasterCsv","loadDuplicateCsv","setState","showClasses","csvRows","entry","studentFirst","toLowerCase","trim","studentLast","row","headers","tableRow","csvCol","length","accessor","sessionAMerged","sessionA","spanish","characterBuilders","primetime","none","sessionBMerged","sessionB","afterProgramming","roomA","find","c","roomB","sessionAClassroom","sessionBClassroom","classA","classB","_this2","duplicateArray","removedDuplicates","map","h","idx","Header","push","convertToObject","duplicateMap","forEach","computeStudentKey","filter","a","data","b","classesA","classesB","dataMapSessionARowData","dataMapSessionBRowData","includes","names","dupeNames","dupeCount","invalidCount","assign","sort","sortStudents","parseInt","id","err","alert","_this3","col","key","classArray","classroom","session","clazz","concat","console","log","react_default","createElement","className","react_csv_reader_default","cssClass","label","onFileLoaded","onError","showError","parserOptions","skipEmptyLines","Fragment","onClick","react_csv","filename","es","filterable","defaultPageSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acd950a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport CSVReader from 'react-csv-reader';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport {CSVLink} from 'react-csv';\n\nconst accessors = [\n  \"id\",\n  \"studentFirst\",\n  \"studentLast\",\n  \"grade\",\n  \"teacher\",\n  \"parentFirst\",\n  \"parentLast\",\n  \"parentEmail\",\n  \"parentPhone\",\n  \"alternateFirst\",\n  \"alternateLast\",\n  \"alternateEmail\",\n  \"alternatePhone\",\n  \"spanish\",\n  \"characterBuilders\",\n  \"primetime\",\n  \"none\",\n  \"ignore1\",\n  \"ignore2\",\n  \"sessionA\",\n  \"sessionB\",\n];\n\nconst classroomForSessionA = [\n  { name: \"Art (K-2nd) A\", class: \"Art\", room: \"Kindergarten Tables\" },\n  { name: \"Capoeira (3rd-5th) A\", class: \"Capoeira\", room: \"Auditorium\" },\n  { name: \"Ceramics (2nd-5th) A\", class: \"Ceramics\", room: \"Ceramics\" },\n  { name: \"Chess (TK-5th) A\", class: \"Chess\", room: \"B-25\" },\n  { name: \"Circus Arts (TK-5th) A\", class: \"Circus Arts\", room: \"Kindergarten Playground\" },\n  { name: \"Coding (2nd-5th) A\", class: \"Coding\", room: \"Room 2\" },\n  { name: \"Flamenco (TK-5th) A\", class: \"Flamenco\", room: \"B-21\" },\n  { name: \"Gardening (K-5th) A\", class: \"Gardening\", room: \"Garden\" },\n  { name: \"Soccer (3rd-5th) A\", class: \"Soccer\", room: \"Grass\" },\n  { name: \"Tennis (K-1st) A\", class: \"Tennis\", room: \"Basketball Court\"},\n  { name: \"WOW LEGO® Early Engineering 1 (TK-2nd) A\", class: \"WOW LEGO® Early Engineering 1\", room: \"Room 1\" },\n  { name: \"WOW LEGO® Elem. Engineering 2 (2nd-5th) A\", class: \"WOW LEGO® Elem. Engineering 2\", room: \"Room 7\"},\n  { name: \"Yoga (TK-5th) A\", class: \"Yoga\", room: \"Room 5\" },\n];\n\nconst classroomForSessionB = [\n  { name: \"Art (3rd-5th) B\", class: \"Art\", room: \"Kindergarten Tables\" },\n  { name: \"Capoeira (K-2nd) B\", class: \"Capoeira\", room: \"Auditorium\" },\n  { name: \"Ceramics (TK-1) B\", class: \"Ceramics\", room: \"Ceramics\" },\n  { name: \"Chess (TK-5th) B\", class: \"Chess\", room: \"B-25\" },\n  { name: \"Circus Arts (TK-5th) B\", class: \"Circus Arts\", room: \"Kindergarten Playground\" },\n  { name: \"Coding (2nd-5th) B\", class: \"Coding\", room: \"Room 2\" },\n  { name: \"Flamenco (TK-5th) B\", class: \"Flamenco\", room: \"B-21\" },\n  { name: \"Gardening (K-5th) B\", class: \"Gardening\", room: \"Garden\" },\n  { name: \"Soccer (TK-2nd) B\", class: \"Soccer\", room: \"Grass\" },\n  { name: \"Tennis (2nd-5th) B\", class: \"Tennis\", room: \"Basketball Court\" },\n  { name: \"WOW LEGO® Early Engineering 1 (TK-2nd) B\", class: \"WOW LEGO® Early Engineering 1\", room: \"Room 1\" },\n  { name: \"WOW LEGO® Elem. Engineering 2 (2nd-5th) B\", class: \"WOW LEGO® Elem. Engineering 2\", room: \"Room 7\" },\n  { name: \"Yoga (TK-5th) B\", class: \"Yoga\", room: \"Room 5\" },\n];\n\nlet rawMasterCsv = [];\nlet duplicateCsv = [];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      columns: [],\n      loadTable: false,\n      masterArray: [],\n      dupes: [],\n      invalidRows: [],\n      afterSchoolPrograms: [],\n      afterSchoolProgramsColumns: [],\n      dataMapSessionA : [],\n      dataMapSessionB: [],\n    };\n    this.reloadTable = this.reloadTable.bind(this);\n    this.showMaster = this.showMaster.bind(this);\n    this.loadMasterCsv = this.loadMasterCsv.bind(this);\n    this.loadDuplicateCsv = this.loadDuplicateCsv.bind(this);\n  }\n\n  showMaster() {\n    this.setState({showMaster: true});\n  }\n\n  hideAll() {\n    this.setState({showMaster: false});\n  }\n\n  showClasses() {\n    this.setState({showClasses: true});\n  }\n\n  hideClasses() {\n    this.setState({showClasses: false});\n  }\n\n  loadMasterCsv(csvRows) {\n    rawMasterCsv = csvRows;\n    this.reloadTable();\n  }\n\n  loadDuplicateCsv(csvRows) {\n    duplicateCsv = csvRows;\n    this.reloadTable();\n  }\n\n  computeStudentKey(entry) {\n    return entry.studentFirst.toLowerCase().trim() + ' ' + entry.studentLast.toLowerCase().trim();\n  }\n\n  convertToObject(row, headers) {\n    let tableRow = {};\n\n    for(let csvCol = 0; csvCol < headers.length; csvCol++) {\n\n      // set tableRow property\n      // property name = header\n      // property value = row value\n      tableRow[headers[csvCol].accessor] = row[csvCol];\n    }\n\n    // Merging Rules for Concurrent After School Programming\n    // Spanish is always session A\n    // Primetime fills in session A or session B\n    // Character Builders files in session A or session B\n    // Primetime or Character Builders should be shown as after school programming IF session A and session B have classes\n    tableRow.sessionAMerged = tableRow.sessionA != 'None' && tableRow.sessionA != ''\n                              ? tableRow.sessionA\n                              : tableRow.spanish\n                                ? tableRow.spanish\n                                : tableRow.characterBuilders\n                                  ? tableRow.characterBuilders\n                                  : tableRow.primetime\n                                    ? tableRow.primetime\n                                    : tableRow.none ? tableRow.none : 'None';\n\n    tableRow.sessionBMerged = tableRow.sessionB != 'None' && tableRow.sessionB != ''\n                              ? tableRow.sessionB\n                              : tableRow.characterBuilders\n                                ? tableRow.characterBuilders\n                                : tableRow.primetime\n                                  ? tableRow.primetime\n                                  : tableRow.none ? tableRow.none : 'None';\n\n    tableRow.afterProgramming = tableRow.characterBuilders\n                                ? tableRow.characterBuilders\n                                : tableRow.primetime\n                                  ? tableRow.primetime\n                                  : tableRow.none ? tableRow.none : 'None';\n\n    const roomA = classroomForSessionA.find(c => c.name === tableRow.sessionA);\n    const roomB = classroomForSessionB.find(c => c.name === tableRow.sessionB);\n    tableRow.sessionAClassroom = tableRow.sessionA != 'None' && tableRow.sessionA != '' && roomA ? roomA.room : 'N/A';\n    tableRow.sessionBClassroom = tableRow.sessionB != 'None' && tableRow.sessionB != '' && roomB ? roomB.room : 'N/A';\n    tableRow.classA = tableRow.sessionA != 'None' && tableRow.sessionA != '' && roomA ? roomA.class : 'N/A';\n    tableRow.classB = tableRow.sessionB != 'None' && tableRow.sessionB != '' && roomB ? roomB.class : 'N/A';\n\n    return tableRow;\n  }\n\n  reloadTable() {\n    this.setState({loadMasterCsv: false});\n    let masterArray = [];\n    const duplicateArray = [];\n    const duplicateCount = 0;\n    let removedDuplicates = [];\n\n    let headers = rawMasterCsv[0].map((h, idx) => {\n      return {'Header': h, 'accessor': accessors[idx] || h }\n    });\n\n    this.setState({columns: headers});\n\n    for(let row = 1; row < rawMasterCsv.length; row++) {\n      masterArray.push(this.convertToObject(rawMasterCsv[row], headers));\n    }\n\n    if(duplicateCsv.length > 0) {\n      for (let row = 1; row < duplicateCsv.length; row++) {\n        duplicateArray.push(this.convertToObject(duplicateCsv[row], headers));\n      }\n      // These should replace the entries which match the same first name and last name of student\n      const duplicateMap = {};\n      duplicateArray.forEach(row => {\n        let name = this.computeStudentKey(row);\n        duplicateMap[name] = row;\n      });\n\n      removedDuplicates = masterArray.filter(entry => duplicateMap[this.computeStudentKey(entry)]);\n      masterArray = masterArray.filter(entry => !duplicateMap[this.computeStudentKey(entry)])\n    }\n\n    let dataMapSessionA = classroomForSessionA.map(a => {\n      return { name: a.name, class: a.class, data: []};\n    });\n\n    let dataMapSessionB = classroomForSessionB.map(b => {\n      return { name: b.name, class: b.class, data: []};\n    });\n\n    let classesA = [];\n    let classesB = [];\n\n    masterArray.forEach(row => {\n      // Push to class specific for sessionA and sessionB\n      const dataMapSessionARowData = dataMapSessionA.find(c => c.name === row.sessionA);\n      if(dataMapSessionARowData) {\n        dataMapSessionARowData.data.push(row);\n      }\n      const dataMapSessionBRowData = dataMapSessionB.find(c => c.name === row.sessionB);\n      if(dataMapSessionBRowData) {\n        dataMapSessionBRowData.data.push(row);\n      }\n\n      if(!classesA.includes(row.sessionA)) {\n        classesA.push(row.sessionA);\n      }\n      if(!classesB.includes(row.sessionB)) {\n        classesB.push(row.sessionB);\n      }\n    });\n\n    ////////// Dupes\n    // Find all where\n    const names = {};\n    const dupeNames = {};\n    let dupeCount = 0;\n    const dupes = [];\n    const invalidRows = [];\n    let invalidCount = 0;\n    masterArray.forEach(row => {\n      if(!row.studentFirst || !row.studentLast) {\n        invalidCount++;\n        invalidRows.push(Object.assign({}, row));\n      }\n      else {\n        let name = this.computeStudentKey(row);\n        if (names[name]) {\n          dupeCount++;\n          dupeNames[name] = 1;\n        }\n        else {\n          names[name] = 1;\n        }\n      }\n      if((row.sessionA == 'None' || row.sessionA == '' || row.sessionA == 'N/A') && (row.sessionB == 'None' || row.sessionB == '' || row.sessionB == 'N/A')) {\n        invalidCount++;\n        invalidRows.push(Object.assign({}, row));\n      }\n    });\n\n    // Now that we know the dupes. add all dupes with that value (otherwise, we missed the first occurrence of a dupe, since it was not detected yet\n    masterArray.forEach(row => {\n      if(row.studentFirst && row.studentLast) {\n        let name = this.computeStudentKey(row);\n        if (dupeNames[name]) {\n          dupes.push(Object.assign({}, row));\n        }\n      }\n    });\n\n    dupes.sort(this.sortStudents);\n    invalidRows.sort(this.sortStudents);\n    removedDuplicates.sort(this.sortStudents);\n\n    this.setState({masterArray: masterArray});\n    this.setState({dataMapSessionA: dataMapSessionA});\n    this.setState({dataMapSessionB: dataMapSessionB});\n    this.setState({dupeCount: dupeCount});\n    this.setState({dupes: dupes});\n    this.setState({invalidCount: invalidCount});\n    this.setState({invalidRows: invalidRows});\n    this.setState({removedDuplicates: removedDuplicates});\n    this.setState({loadMasterCsv: true});\n  }\n\n  sortStudents(a, b) {\n    if(a.studentLast < b.studentLast) {\n      return -1;\n    }\n    if(a.studentLast > b.studentLast) {\n      return 1;\n    }\n    else {\n      if(a.studentFirst < b.studentFirst) {\n        return -1;\n      }\n      if(a.studentFirst > b.studentFirst) {\n        return 1;\n      }\n      else {\n        if(parseInt(a.id, 10) < parseInt(b.id, 10)) {\n          return -1;\n        }\n        if(parseInt(a.id, 10) > parseInt(b.id, 10)) {\n          return 1;\n        }\n      }\n    }\n  }\n\n  showError(err) {\n    alert(err);\n  }\n\n  render() {\n    const afterSchoolProgramsColumns = [\n      {'Header': 'Student First Name', 'accessor': 'studentFirst'},\n      {'Header': 'Student Last Name', 'accessor': 'studentLast'},\n      {'Header': 'Grade', 'accessor': 'grade'},\n      {'Header': 'Teacher', 'accessor': 'teacher'},\n      {'Header': 'Parent First Name', 'accessor': 'parentFirst'},\n      {'Header': 'Parent Last Name', 'accessor': 'parentLast'},\n      {'Header': 'Parent Email', 'accessor': 'parentEmail'},\n      {'Header': 'Parent Phone', 'accessor': 'parentPhone'},\n      {'Header': 'Alternate First Name', 'accessor': 'alternateFirst'},\n      {'Header': 'Alternate Last Name', 'accessor': 'alternateLast'},\n      {'Header': 'Alternate Email', 'accessor': 'alternateEmail'},\n      {'Header': 'Alternate Phone', 'accessor': 'alternatePhone'},\n      {'Header': 'Session A', 'accessor': 'sessionAMerged'},\n      {'Header': 'Session B', 'accessor': 'sessionBMerged'},\n      {'Header': 'A Classroom', 'accessor': 'sessionAClassroom'},\n      {'Header': 'B Classroom', 'accessor': 'sessionBClassroom'},\n      {'Header': 'After Programming', 'accessor': 'afterProgramming'},\n    ];\n\n    afterSchoolProgramsColumns.forEach(col => col.key = col.accessor);\n\n    const classArray = [];\n    classroomForSessionA.forEach(classroom => {\n      let sessionA = this.state.dataMapSessionA.find(session => session.class === classroom.class);\n      let sessionB = this.state.dataMapSessionB.find(session => session.class === classroom.class);\n      if(sessionA && sessionB) {\n        classArray.push({\n                          clazz: classroom.class,\n                          data: sessionA.data.concat(sessionB.data)\n                        });\n      }\n    });\n\n    console.log(classArray);\n    return (\n      <div className=\"App\">\n        <CSVReader\n          cssClass=\"csv-reader-input\"\n          label=\"Upload Master CSV\"\n          onFileLoaded={this.loadMasterCsv}\n          onError={this.showError}\n          parserOptions={{skipEmptyLines: true}}\n        />\n        <CSVReader\n          cssClass=\"csv-reader-input\"\n          label=\"Upload Duplicate Override CSV\"\n          onFileLoaded={this.loadDuplicateCsv}\n          onError={this.showError}\n          parserOptions={{skipEmptyLines: true}}\n        />\n        { this.state.loadMasterCsv &&\n          <>\n            <button onClick={this.showMaster}>Show All</button>\n            <h1>{this.state.dupeCount} Duplicates</h1>\n            <CSVLink data={this.state.dupes}>Download Duplicates</CSVLink>\n            <br/>\n            <h1>Merged Master</h1>\n            <CSVLink data={this.state.masterArray}>Download Merged Master</CSVLink>\n            <br/>\n            <h1>Classes</h1>\n            {classArray.map((clazz) => <><CSVLink\n              data={clazz.data} headers={afterSchoolProgramsColumns} filename={clazz.clazz}>Download {clazz.clazz}</CSVLink><br/></>\n            )}\n            <h1>Session A</h1>\n          {this.state.dataMapSessionA.map((sessionA) => <><CSVLink\n              data={sessionA.data} headers={afterSchoolProgramsColumns} filename={sessionA.name}>Download {sessionA.name}</CSVLink> ({sessionA.data.length} entries)<br/></>\n          )}\n            <h1>Session B</h1>\n          { this.state.dataMapSessionB.map((sessionB) =>\n            <><CSVLink\n              data={sessionB.data} headers={afterSchoolProgramsColumns} filename={sessionB.name}>Download {sessionB.name}</CSVLink> ({sessionB.data.length} entries)<br/></>\n          )}\n            <br/>\n          {this.state.showMaster &&\n           <>\n           <h1>All</h1>\n           < ReactTable\n              filterable\n              defaultPageSize={300}\n              data={this.state.masterArray}\n              columns={this.state.columns}/></>\n          }\n          {this.state.invalidCount > 0 && <>\n            <h1>{this.state.invalidCount} Invalid</h1>\n            <ReactTable\n              defaultPageSize={50}\n              data={this.state.invalidRows}\n              columns={this.state.columns}/>\n          </>\n          }\n          {this.state.dupeCount > 0 && <>\n            <h1>{this.state.dupeCount} Duplicates</h1>\n            <ReactTable\n              defaultPageSize={50}\n              data={this.state.dupes}\n              columns={this.state.columns}/>\n          </>\n          }\n          {this.state.removedDuplicates.length > 0 && <>\n            <h1>{this.state.removedDuplicates.length} Removed Duplicates</h1>\n            <ReactTable\n              defaultPageSize={50}\n              data={this.state.removedDuplicates}\n              columns={this.state.columns}/>\n          </>\n          }\n            <h1>Merged Master</h1>\n            <ReactTable\n              defaultPageSize={this.state.masterArray.length}\n              data={this.state.masterArray}\n              columns={afterSchoolProgramsColumns}/>\n\n            <h1>Session A</h1>\n            {\n              this.state.dataMapSessionA.map((sessionA) =>\n                                               <>\n                                                 <h2>{sessionA.name} ({sessionA.data.length} entries)</h2>\n                                                 <ReactTable\n                                                   defaultPageSize={sessionA.data.length}\n                                                   data={sessionA.data}\n                                                   columns={afterSchoolProgramsColumns}/>\n                                               </>\n              )\n            }\n            <h1>Session B</h1>\n            {\n              this.state.dataMapSessionB.map((sessionB) =>\n                                               <>\n                                                 <h2>{sessionB.name} ({sessionB.data.length} entries)</h2>\n                                                 <ReactTable\n                                                   defaultPageSize={sessionB.data.length}\n                                                   data={sessionB.data}\n                                                   columns={afterSchoolProgramsColumns}/>\n                                               </>\n              )\n            }\n          </>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}